head(tr1[[1]])
setwd("/Users/jschap/Desktop/Cross_Sections")
saveloc <- "/Users/jschap/Desktop/Cross_Sections/Data/Processed_Data"
load(file.path(saveloc, "processed_data_p21_sl_500m_lowres.rda"))
WSEw <- xWSEw[[1]]
plot(WSEw)
WSEw
# Use multiple slope breaks
b <- breakpoints(WSE~w, data = WSEw, h=5)$breakpoints # h is the minimum number of points required for a section
library(strucchange)
# Use multiple slope breaks
b <- breakpoints(WSE~w, data = WSEw, h=5)$breakpoints # h is the minimum number of points required for a section
b
sb.ind <- b[1]
lf1 <- lm(WSE~w, data = WSEw[1:sb.ind,])
fits <- list(lf1)
lines(predict(fits), WSEw$w)
lines(predict(fits[[1]]), WSEw$w)
lines(predict(fits[[1]]), WSEw$w[1:sb.ind])
n = 21; lines(predict(fits[[2]]), WSEw$w[sb.ind:n])
lf <- lm(WSE ~ breakfactor(b))
lf <- lm(WSEw$WSE ~ breakfactor(b))
lf <- lm(WSEw ~ breakfactor(b))
breakfactor(b)
b
breakfactor(WSEw)
?breakfactor
class(b)
# Use multiple slope breaks
b <- breakpoints(WSE~w, data = WSEw, h=5)$breakpoints # h is the minimum number of points required for a section
b <- breakpoints(WSE~w, data = WSEw, h=5)
b
breakfactor(b)
lf <- lm(WSEw ~ breakfactor(b))
lm(WSEw ~ breakfactor(b, breaks =1))
type(WSEw)
class(WSEw)
data("Nile")
plot(Nile)
bp.nile <- breakpoints(Nile ~ 1)
fm0 <- lm(Nile ~ 1)
fm1 <- lm(Nile ~ breakfactor(bp.nile, breaks = 1))
lines(fitted(fm0), col = 3)
lines(fitted(fm1), col = 4)
lines(bp.nile, breaks = 1)
fitted(fm0)
plot(fitted(fm1), col = 4)
plot(fitted(fm0), col = 3)
data("Nile")
plot(Nile)
fm1$model
Nile
plot(Nile)
fit(fm0)
fitted(fm0)
lines(fitted(fm0), col = "red")
plot(as.numeric(Nile))
plot(as.numeric(Nile), type = "l")
lines(fitted(fm0), col = "red")
lines(fitted(fm1), col = "green")
######
WSEw
fm0 <- lm(WSE ~ w, data = WSEw)
plot(WSE~w, WSEw)
lines(WSEw$w, fitted(fm0), col = "red")
fm1 <- lm(WSE ~ w*breakfactor(b))
fm1 <- lm(WSE ~ w*breakfactor(b), data = WSEw)
lines(WSEw$w, fitted(fm1), col = "blue")
plot(WSEw$w, fitted(fm1), col = "blue")
data(ftemp)
plot(ftemp)
y <- window(ftemp, start = 8, end = 60)
if(require(strucchange)) {
bp <- breakpoints(y ~ 1)
plot(bp)
fm.seg <- lm(y ~ 0 + breakfactor(bp))
plot(y)
lines(8:60, fitted(fm.seg), col = 4)
lines(confint(bp))
}
ftemp=WSEw
data(ftemp)
plot(ftemp)
y <- window(ftemp, start = 8, end = 60)
if(require(strucchange)) {
bp <- breakpoints(y ~ 1)
plot(bp)
fm.seg <- lm(y ~ 0 + breakfactor(bp))
plot(y)
lines(8:60, fitted(fm.seg), col = 4)
lines(confint(bp))
}
ftemp$y = ftemp$WSE
ftemp$x = ftemp$w
data(ftemp)
plot(ftemp)
y <- window(ftemp, start = 8, end = 60)
if(require(strucchange)) {
bp <- breakpoints(y ~ 1)
plot(bp)
fm.seg <- lm(y ~ 0 + breakfactor(bp))
plot(y)
lines(8:60, fitted(fm.seg), col = 4)
lines(confint(bp))
}
ftemp = data.frame(y=WSEw$WSE, x =WSEw$w)
data(ftemp)
plot(ftemp)
y <- window(ftemp, start = 8, end = 60)
if(require(strucchange)) {
bp <- breakpoints(y ~ 1)
plot(bp)
fm.seg <- lm(y ~ 0 + breakfactor(bp))
plot(y)
lines(8:60, fitted(fm.seg), col = 4)
lines(confint(bp))
}
plot(ftemp)
y <- window(ftemp, start = 8, end = 60)
y <- window(ftemp, start = 2, end = 20)
y <- window(ftemp, start = 2, end = 10)
bp <- breakpoints(y ~ 1)
bp <- breakpoints(y ~ 1, WSEw)
bp <- breakpoints(y ~ 1, data = WSEw)
bp <- breakpoints(y ~ 1, data = ftemp)
plot(bp)
fm.seg <- lm(y ~ 0 + breakfactor(bp))
fm.seg <- lm(y ~ 0 + breakfactor(bp), data = ftemp)
plot(y)
plot(y, data = ftemp)
plot(y~x, data = ftemp)
lines(8:60, fitted(fm.seg), col = 4)
lines(ftemp$x, fitted(fm.seg), col = 4)
lines(confint(bp))
WSEw <- xWSEw[[1]]
plot(WSEw)
plot(WSE~w, WSEw)
b <- breakpoints(WSEw)
b <- breakpoints(WSE~w, data = WSEw, h=5)
b
b <- breakpoints(WSE~w, data = WSEw, h=5)$breakpoints
b
WSEw$w[b]
lf<-lm(WSE~w, data = WSEw)
sb<-segmented(lf, seg.Z= ~w, control=sctrl, psi=WSEw$w[b])
library(segmented)
sb<-segmented(lf, seg.Z= ~w, control=sctrl, psi=WSEw$w[b])
# The purpose of this is to make the segmented fitting stop after one iteration, so
# as to keep the first "guess" of the breakpoints
sctrl <- seg.control(toll = 1e-04, it.max = 1, display = FALSE,
stop.if.error = TRUE, K = 10, quant = FALSE, last = TRUE, maxit.glm = 25, h = 1,
n.boot=20, size.boot=NULL, gap=FALSE, jt=FALSE, nonParam=TRUE,
random=TRUE, powers=c(1,1), seed=NULL)
lf<-lm(WSE~w, data = WSEw)
sb<-segmented(lf, seg.Z= ~w, control=sctrl, psi=WSEw$w[b])
sb
line(WSEw$w, fitted(sb), col = "red")
lines(WSEw$w, fitted(sb), col = "red")
b=c(14,19,26)
b=c(14,15,19)
lfsb<-segmented(lf, seg.Z= ~w, control=sctrl, psi=WSEw$w[b])
b=c(2,16)
lfsb<-segmented(lf, seg.Z= ~w, control=sctrl, psi=WSEw$w[b])
lines(WSEw$w, fitted(lfsb), col = "blue")
fit_slopebreak <- function(WSEw,  mersel = FALSE, thres = 0.015,
window = 4, multiple_breaks = FALSE, continuity = TRUE)
{
nn <- length(WSEw$w) # number of data points
if (mersel)
{
# Use original Mersel method
sb.ind <- test_slope_break(WSEw$WSE, WSEw$w, thres = thres, window = window, m = FALSE)
if (!is.null(sb.ind))
{
lf1 <- lm(WSE~w, data = WSEw[1:sb.ind,])
fits <- list(lf1)
} else
{
return(NULL)
}
} else
{
if (multiple_breaks)
{
# Use multiple slope breaks
b <- breakpoints(WSE~w, data = WSEw, h=5)$breakpoints # h is the minimum number of points required for a section
if (is.null(b))
{
b<-NA
print("No breakpoints could be identified")
}
sb.ind <- b[1]
if (!continuity)
{
# strucchange package does not force continuity at breakpoints
b <- breakpoints(WSE~w, data = WSEw, h=5)
lf <- lm(WSE ~ w*breakfactor(b), data = WSEw)
fits <- list(lf)
# lf1 <- lm(WSE~w, data = WSEw[1:sb.ind,])
} else
{
#print("Continuous linear fit with multiple breakpoints not yet implemented")
#return(NULL)
# Using segmented package to perform the fit
lf<-lm(WSE~w, data = WSEw)
lfsb<-segmented(lf, seg.Z= ~w, control=sctrl, psi=WSEw$w[b])
fits <- list(lfsb)
#print("Using segmented package to perform the piecewise continuous fit with multiple, known breakpoints")
#sctrl <- seg.control(toll = 1e-04, it.max = 1, display = FALSE,
#                     stop.if.error = TRUE, K = 10, quant = FALSE, last = TRUE, maxit.glm = 25, h = 1,
#                     n.boot=20, size.boot=NULL, gap=FALSE, jt=FALSE, nonParam=TRUE,
#                     random=TRUE, powers=c(1,1), seed=NULL)
#lf <- lm(WSE~w, data = WSEw)
#fit <- segmented(lf, seg.Z= ~w, control=sctrl, psi=b)
#fits <- list(fit)
#sb.ind <- b
}
# Multiple breakpoints
# Do segmented regression with multiple (known) breakpoints
# Require continuity (or not)
} else
{
# Use one slope break
b <- breakpoints(WSE~w, data = WSEw, breaks = 1, h=5)$breakpoints
if (is.null(b))
{
b<-NA
print("No breakpoints could be identified")
}
sb.ind <- b[1]
WSEw1 <- WSEw[1:sb.ind,]
WSEw2 <- WSEw[sb.ind:nn,]
if (!continuity)
{
lf1 <- lm(WSE~w, data = WSEw1) # below slope break
lf2 <- lm(WSE~w, data = WSEw2) # above slope break
} else if (continuity)
{
lf1 <- lm(WSE~w, data = WSEw1)
a0 <- as.numeric(coef(lf1)[1])
a1 <- as.numeric(coef(lf1)[2])
wb <- WSEw$w[sb.ind]
intercept <- a0+a1*wb
lf2 <- lm(WSE ~ -1 + I(w-wb), data = WSEw2, offset = rep(intercept,dim(WSEw2)[1]))
}
fits <- list(lf1, lf2)
}
}
attributes(fits) <- list(sb.ind = sb.ind) # adding the sb.ind as an output
return(fits)
}
?fit_slopebreak
sbfit <- fit_slopebreak(WSEw = xWSEw[[1]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, xWSEw[[1]])
lines(xWSEw[[1]]$w, fitted(sbfit), col = "red")
fit_slopebreakfitted(sbfit)
fitted(sbfit)
sbfit <- fit_slopebreak(WSEw = xWSEw[[1]], multiple_breaks = TRUE, continuity = TRUE)
sbfit
fitted(sbfit)
predict(sbfit)
lines(xWSEw[[1]]$w, fitted(sbfit[[1]]), col = "red")
sbfit <- fit_slopebreak(WSEw = xWSEw[[50]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, xWSEw[[1]])
lines(xWSEw[[1]]$w, fitted(sbfit[[1]]), col = "red")
r <- 50
sbfit <- fit_slopebreak(WSEw = xWSEw[[r]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, xWSEw[[r]])
lines(xWSEw[[r]]$w, fitted(sbfit[[1]]), col = "red")
r <- 5
sbfit <- fit_slopebreak(WSEw = xWSEw[[r]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, xWSEw[[r]])
lines(xWSEw[[r]]$w, fitted(sbfit[[1]]), col = "red")
attributes(sbfit)
sbfit
breaks(sbfit)
breakpoints(sbfit)
str(sbfit)
sbfit[[1]]
b
sbfit <- fit_slopebreak(WSEw = xWSEw[[r]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, xWSEw[[r]])
lines(xWSEw[[r]]$w, fitted(sbfit[[1]]), col = "red")
r <- 5
sbfit <- fit_slopebreak(WSEw = rWSEw[[r]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, rWSEw[[r]])
lines(rWSEw[[r]]$w, fitted(sbfit[[1]]), col = "red")
sb.ind
sb.ind <- attributes(sbfit[[1]])
(sb.ind <- attributes(sbfit[[1]]))
(sb.ind <- attributes(sbfit))
r <- 1
sbfit <- fit_slopebreak(WSEw = rWSEw[[r]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, rWSEw[[r]])
lines(rWSEw[[r]]$w, fitted(sbfit[[1]]), col = "red")
(sb.ind <- attributes(sbfit))
r <- 30
sbfit <- fit_slopebreak(WSEw = rWSEw[[r]], multiple_breaks = TRUE, continuity = TRUE)
plot(WSE~w, rWSEw[[r]])
lines(rWSEw[[r]]$w, fitted(sbfit[[1]]), col = "red")
(sb.ind <- attributes(sbfit))
getwd()
setwd(getwd())
rm(list=ls())
opar <- par()
# Ideally, these packages would be imported by the WSEw package.
# Better yet, it wouldn't require this many libraries; it is a lot.
library(rgdal)
library(maptools)
library(raster)
library(strucchange)
library(segmented)
library(minpack.lm)
library(devtools)
library(roxygen2)
setwd("Codes/pkg")
setwd("WSEw")
document()
setwd("..")
install("WSEw")
library(WSEw)
setwd("/Users/jschap/Desktop/Cross_Sections")
# Cross section geometry and WSE-w relationships
processed_data <- "/Users/jschap/Desktop/Cross_Sections/Data/Processed_Data/processed_data_p21_sl_500m_lowres.rda"
load(processed_data)
# Exposure levels
expo <- seq(0.05, 0.95, by = 0.05)
r <- 1
# Make observations
WSEw_obs <- observe(rWSEw[[r]], exposure = 0.5, sd_wse = 0, sd_w = 0)
# Use linear method
lf.mersel <- fit_linear(WSEw_obs, mersel = TRUE, thres = 0.015)
# Use linear method
lf.mersel <- fit_linear(WSEw_obs, mersel = TRUE, thres = 1e5)
lf.mersel
attributes(lf.mersel)
attributes(lf.mersel[[1]])
class(lf.mersel)
lf.mersel <- fit_linear(WSEw_obs, mersel = TRUE, thres = 0)
lf.mersel
?lf.mersel
?fit_linear
test_linear
test_linear(WSEw_obs$WSE, WSEw_obs$w)
test_linear(WSEw_obs$WSE, WSEw_obs$w, 1e5)
nr <- length(rWSEw)
# Find optimal locations
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(rWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.015)
}
fit_linear <- function(WSEw,  mersel = FALSE, thres = NULL)
{
if (length(WSEw$WSE)<2*5)
{
print("Not enough data points")
return(NULL)
}
if (!mersel)
{
lf <- lm(WSE~w, data = WSEw)
return(lf)
} else
{
tl <- test_linear(WSEw$WSE, WSEw$w, thres = thres)
if (!tl)
{
lf <- lm(WSE~w, data = WSEw)
return(lf)
} else
{
print("Not an optimal location")
return(NULL)
}
}
}
# ------------------------------------------------------------------------------------------------------
#' Test Linear
#'
#' Tests whether the linear method of Mersel et al. (2013) is appropriate for the WSE-w measurements
#' @export
test_linear <- function(WSE, w, thres = 0.015)
{
# Tests if the linear method is appropriate for depth estimation
maxdiff <- get_maxdiff(WSE,w)
if (maxdiff < thres)
{
#print("Use the linear method")
# return(s1)
return(TRUE)
} else
{
#print("Do not use the linear method")
return(FALSE)
}
}
# Find optimal locations
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(rWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.015)
}
opt.lin
# Find optimal locations
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(rWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.03)
}
opt.lin
# Find optimal locations
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(rWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 1)
}
sum(opt.lin)
opt.lin
opt.lin.ind <- which(opt.lin)
opt.lin.ind
plot(WSE~w, data = rWSEw[[1]])
plot(WSE~w, data = rWSEw[[4]])
plot(WSE~w, data = rWSEw[[1]])
plot(WSE~w, data = rWSEw[[57]])
# Find optimal locations
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(rWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.5)
}
opt.lin.ind <- which(opt.lin)
opt.lin.ind
# Find optimal locations
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(rWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.8)
}
opt.lin.ind <- which(opt.lin)
plot(WSE~w, data = rWSEw[[48]])
plot(WSE~w, data = rWSEw[[55]])
# Find optimal locations
nr <- length(xWSEw)
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(xWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.8)
}
opt.lin.ind <- which(opt.lin)
opt.lin.ind
# Find optimal locations
nr <- length(xWSEw)
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(xWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.015)
}
opt.lin.ind <- which(opt.lin)
# Find optimal locations
nr <- length(xWSEw)
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(xWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.5)
}
opt.lin.ind <- which(opt.lin)
# Find optimal locations
nr <- length(xWSEw)
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(xWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.05)
}
opt.lin.ind <- which(opt.lin)
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(xWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.1)
}
opt.lin.ind <- which(opt.lin)
opt.lin <- vector(length = nr)
for (r in 1:nr)
{
WSEw_obs <- observe(xWSEw[[r]], exposure = 1, sd_wse = 0, sd_w = 0)
opt.lin[r] <- test_linear(WSEw_obs$WSE, WSEw_obs$w, thres = 0.2)
}
opt.lin.ind <- which(opt.lin)
plot(WSE~w, data = xWSEw[[11]])
plot(WSE~w, data = xWSEw[[50]])
plot(WSE~w, data = xWSEw[[52]])
plot(WSE~w, data = xWSEw[[2]])
plot(WSE~w, data = xWSEw[[10]])
setwd("Codes/pkg")
document()
setwd("WSEw")
document()
setwd("..")
install("WSEw")
25*10
25*10/60
